syntax = "proto3";

import "proto/transaction.proto";

package slog.internal;

message Batch {
    uint64 id = 1;
    repeated Transaction transactions = 2;
    // All txns in this batch has this same type.
    // Can either be SINGLE_HOME or MULTI_HOME. 
    // LOCK_ONLY txns are also considered SINGLE_HOME.
    TransactionType transaction_type = 3;
    // For recording the event time for all
    // transactions in this batch simultaneously
    repeated TransactionEvent events = 4;
    repeated int64 event_times = 5;    // when the events took place
    repeated uint32 event_machines = 6; // where the events took place
}

message LocalBatchOrder {
    // queue_id is the partition that the 
    // batch is generated from
    uint32 queue_id = 1;
    uint32 slot = 2;
    uint32 leader = 3;
}

message RemoteBatchOrder {
    uint64 batch_id = 1;
    uint32 slot = 2;
    uint32 home = 3;
    bool need_ack = 4;
}

message Envelope {
    oneof type {
        Request request = 1;
        Response response = 2;
        bytes raw = 3;
    }
    uint32 from = 4;
}

/***********************************************
                    REQUESTS
***********************************************/
/**
 * The first message of a communication between two entities is
 * always a Request. Some types of Request needs a Response
 * (e.g. LookUpMasterRequest); names of these requests end with "Request".
 * Some others are one-way requests (e.g. PaxosPropose) and do not 
 * end with "Request".
 */
message Request {
    oneof type {
        Ping ping = 1;
        Signal signal = 2;
        BrokerRedirect broker_redirect = 3;
        ForwardTransaction forward_txn = 4;
        LookupMasterRequest lookup_master = 5;
        ForwardBatch forward_batch = 6;
        BatchReplicationAck batch_replication_ack = 7;
        PaxosPropose paxos_propose = 8;
        PaxosAcceptRequest paxos_accept = 9;
        PaxosCommitRequest paxos_commit = 10;
        RemoteReadResult remote_read_result = 11;
        CompletedSubtransaction completed_subtxn = 12;
        StatsRequest stats = 13;
        GraphLog graph_log = 14;
    }
}

message Ping {
    int64 time = 1;
    uint32 target = 2;
    uint32 from_channel = 3;
}

/**
 * Generic signal message
 */
 message Signal {
}

message BrokerRedirect {
    uint64 tag = 1;
    uint32 channel = 2;
    bool stop = 3;
}

message ForwardTransaction {
    Transaction txn = 1;
}

message LookupMasterRequest {
    repeated uint64 txn_ids = 1;
    repeated string keys = 2;
}

message ForwardBatch {
    oneof part {
        Batch batch_data = 1;
        LocalBatchOrder local_batch_order = 2;
        RemoteBatchOrder remote_batch_order = 3;
    }
    // Batches generated by the same machine need to follow the
    // order of creation. This field is used to number the batches
    // following that order. It always start from 0 and increment by 1
    uint32 same_origin_position = 4;
}

message BatchReplicationAck {
    uint64 batch_id = 1;
}

message PaxosPropose {
    uint64 value = 1;
}

message PaxosAcceptRequest {
    uint32 ballot = 1;
    uint32 slot = 2;
    uint64 value = 3;
}

message PaxosCommitRequest {
    uint32 slot = 1;
    uint64 value = 2;
    uint32 leader = 3;
}

message RemoteReadResult {
    uint64 txn_id = 1;
    bool deadlocked = 2;
    uint32 partition = 3;
    map<string, ValueEntry> reads = 4;
    bool will_abort = 5;
    string abort_reason = 6;
}

message CompletedSubtransaction {
    Transaction txn = 1;
    uint32 partition = 2;
}

message StatsRequest {
    uint64 id = 1;
    uint32 level = 2;
}

message GraphLogEntry {
    uint64 txn_id = 1;
    int32 num_partitions = 2;
    bool is_complete = 3;
    repeated uint64 incoming_edges = 4;
}

message GraphLog {
    repeated GraphLogEntry entries = 1;
}

/***********************************************
                    RESPONSES
***********************************************/
/**
 * A response is always preceeded by a Request
 */
message Response {
    oneof type {
        Pong pong = 1;
        LookupMasterResponse lookup_master = 2;
        PaxosAcceptResponse paxos_accept = 3;
        PaxosCommitResponse paxos_commit = 4;
        StatsResponse stats = 6;
    }
}

/**
 * For debugging and testing purposes
 */
message Pong {
    int64 time = 1;
    uint32 target = 2;
}

message LookupMasterResponse {
    repeated uint64 txn_ids = 1;
    map<string, MasterMetadata> master_metadata = 2;
}

message PaxosAcceptResponse {
    uint32 ballot = 1;
    uint32 slot = 2;
}

message PaxosCommitResponse {
    uint32 slot = 1;
}

message StatsResponse {
    uint64 id = 1;
    bytes stats_json = 2;
}