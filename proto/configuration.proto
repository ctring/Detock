syntax = "proto3";

import "proto/modules.proto";
import "proto/transaction.proto";

package slog.internal;

message Replica {
    // List of all machine addresses in the system.
    // This list must have the size equal to number of partitions
    // If protocol is "tcp", these are IP addresses.
    // If protocol is "icp", these are filesystem paths.
    repeated bytes addresses = 1;
    // List of machines used for benchmarking. This field is only used by the admin tool
    repeated bytes client_addresses = 2;
}

message ReplicationDelayExperiment {
    // Percent of batches that are delayed
    uint32 delay_pct = 1;
    // Average duration of delay in milliseconds
    uint32 delay_amount_ms = 2;
}

/**
 * With hash partitioning, each key is interpreted as a byte string.
 * The keys are distributed to the partitions based on their
 * hash values.
 * Initial data can be loaded from an external file.
 */
message HashPartitioning {
    // Number of prefix bytes of a key to use for partitioning
    uint32 partition_key_num_bytes = 1;
}

/**
 * With simple partitioning, each key is assumed to be a number.
 * The keys are distributed to the partitions based on key values
 * modulo the number of partitions. 
 * Initial data cannot be loaded from an external file but can be
 * generated at startup. The following is an example of home and partition
 * assignment of the generated data with 3 partitions and 4 regions.
 *
 *        home | 0  1  2  3  0  1  2  3  0  ...
 * ------------|-------------------------------
 * partition 0 | 0  3  6  9  12 15 18 21 24 ...
 * partition 1 | 1  4  7  10 13 16 19 22 25 ...
 * partition 2 | 2  5  8  11 14 17 20 23 26 ...
 * ------------|-------------------------------
 *             |            keys            
 */
message SimplePartitioning {
    // Number of records to generate
    uint64 num_records = 1;
    // Size of a generated record in bytes
    uint32 record_size_bytes = 2;
}

message CpuPinning {
    ModuleId module = 1;
    uint32 cpu = 2;
}

enum Commands {
    NOOP = 0;
    DUMMY = 1;
    KEY_VALUE = 2;
}

/**
 * The schema of a configuration file.
 */
message Configuration {
    // Protocol for the zmq sockets in the broker. Use "tcp" for
    // normal running and "icp" for unit and integration tests
    bytes protocol = 1;
    // Replica groups. Each group has a list of machine addresses
    // with the size equal to number of partitions
    repeated Replica replicas = 2;
    // Port for the zmq sockets in the broker. Each value will create a new broker thread
    repeated uint32 broker_ports = 3;
    // Port for the server
    uint32 server_port = 4;
    // Number of partitions per replica
    uint32 num_partitions = 5;
    // Partitioning scheme
    oneof partitioning {
        HashPartitioning hash_partitioning = 6;
        SimplePartitioning simple_partitioning = 7;
    }
    // Number of worker threads for processing the transactions
    uint32 num_workers = 8;
    // How long the forwarder waits for batching
    uint64 forwarder_batch_duration = 9;
    // Maximum number of txns in a forwarder batch. Set to 0 for unlimited batch size
    int32 forwarder_max_batch_size = 10;
    // How long the sequencer waits for batching
    uint64 sequencer_batch_duration = 11;
    // Maximum number of txns in a sequencer batch. Set to 0 for unlimited batch size
    int32 sequencer_max_batch_size = 12;
    // Number of replicas that need to be synchronously replicated to
    uint32 replication_factor = 13;
    // Replication of txn batches will be delayed to simulate uneven network latency
    ReplicationDelayExperiment replication_delay = 14;
    // Do not record specified events
    repeated TransactionEvent disabled_events = 15;
    // For multi-home txn, send lock-only txns directly to the regions, skipping the global orderer
    bool bypass_mh_orderer = 16;
    // Pin each module to a cpu
    repeated CpuPinning cpu_pinnings = 17;
    // Return dummy txns back to the client instead of full results
    bool return_dummy_txn = 18;
    // Number of retries after calling zmq::recv something
    int32 recv_retries = 19;
    // Type of commands to run while executing a txn 
    Commands commands = 20;
    // Latency between replicas. This is a list of strings each of which corresponds to a replica
    // specified in `replicas`. Each string is a comma-separated list of integer values. The number
    // of values is the same as number of replica. Each value is the one-way latency in ms between
    // the corresponding replicas. For example, ['0,90', '80,0'] means the latency from replica 0 
    // to replica 1 is 90ms, and the latency from replica 1 to replica 0 is 80ms.
    repeated bytes replica_latency = 21;
    // For each MH transaction, the involved regions will wait in such a way that their respective lock-only 
    // txns are put into the batches at approximately the same time
    bool synchronized_batching = 22;
    // Percentage of metrics to sample
    uint32 sample_rate = 23;
    // The ratio between fetching rate for remote logs message vs fetching rate for local log messages. Expressed
    // in the format "<remote>:<local>". For example "5:1" means the interleaver tries to fetch 5 messages for
    // remote logs before fetching 1 message for local log.
    bytes interleaver_remote_to_local_ratio = 24;
}