syntax = "proto3";
package slog;

enum TransactionType {
    UNKNOWN = 0;
    SINGLE_HOME = 1;
    MULTI_HOME_OR_LOCK_ONLY = 2;
}

enum TransactionStatus {
    NOT_STARTED = 0;
    COMMITTED = 1;
    ABORTED = 2;
}

enum KeyType {
    READ = 0;
    WRITE = 1;
}

message MasterMetadata {
    uint32 master = 1;
    uint32 counter = 2;
}

message ValueEntry {
    string value = 1;
    string new_value = 2;
    KeyType type = 3;
    oneof optional {
        MasterMetadata metadata = 4;
    }
}

enum TransactionEvent {
    ENTER_SERVER = 0;
    EXIT_SERVER_TO_FORWARDER = 1;
    ENTER_FORWARDER = 2;
    EXIT_FORWARDER_TO_SEQUENCER = 3;
    EXIT_FORWARDER_TO_MULTI_HOME_ORDERER = 4;
    ENTER_MULTI_HOME_ORDERER = 5;
    ENTER_MULTI_HOME_ORDERER_IN_BATCH = 6;
    EXIT_MULTI_HOME_ORDERER_IN_BATCH = 7;
    EXIT_MULTI_HOME_ORDERER = 8;
    ENTER_SEQUENCER = 9;
    ENTER_SEQUENCER_IN_BATCH = 10;
    EXIT_SEQUENCER_IN_BATCH = 11;
    ENTER_INTERLEAVER_IN_BATCH = 12;
    EXIT_INTERLEAVER = 13;
    ENTER_SCHEDULER = 14;
    EXIT_GLOBAL_LOG = 15;
    ACCEPTED = 16;
    DISPATCHED = 17;
    ENTER_WORKER = 18;
    EXIT_WORKER = 19;
    RETURN_TO_SERVER = 20;
    EXIT_SERVER_TO_CLIENT = 21;
}

message TransactionInternal {
    // unique transaction id, multi-home and lock only
    // txns share this id
    uint32 id = 1;
    TransactionType type = 2;
    int32 home = 3;
    uint32 coordinating_server = 4;
    repeated uint32 involved_partitions = 5;
    repeated uint32 active_partitions = 6;
    repeated uint32 involved_replicas = 7;

    // for recording time of different events of txn
    repeated TransactionEvent events = 8;
    repeated int64 event_times = 9;    // when the events took place
    repeated uint32 event_machines = 10; // where the events took place
}

message RemasterProcedure {
    uint32 new_master = 1;
    // The lock only for the new master will create a new key
    bool is_new_master_lock_only = 2;
}

message Transaction {
    TransactionInternal internal = 1;

    oneof procedure {
        /*
        Commands:
        GET key1
        SET key2 value2
        DEL key4
        COPY key1 key3
        */
        string code = 2;
        /*
        Remaster transactions will move the keys in the write_set to the new master.
        MasterMetadata must still be correct for the keys.
        */
        RemasterProcedure remaster = 3;
    }

    map<string, ValueEntry> keys = 4;
    repeated string deleted_keys = 5;

    TransactionStatus status = 6;
    string abort_reason = 7;
}